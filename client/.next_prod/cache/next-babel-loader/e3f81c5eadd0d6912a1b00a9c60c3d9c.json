{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport { getApi } from './api';\nvar api = getApi();\n\nvar errorHandle = function errorHandle(error, unknownMessage) {\n  var message = error.response ? error.response.data.message : unknownMessage;\n  return {\n    data: {\n      message: message\n    },\n    status: 555\n  };\n};\n\nexport var registration = function registration(user) {\n  return api.post('auth/registration', user)[\"catch\"](function (error) {\n    return errorHandle(error, 'Регистрация недоступна');\n  });\n};\nexport var signIn = function signIn(user) {\n  return api.post('auth/login', user)[\"catch\"](function (error) {\n    return errorHandle(error, 'Авторизация недоступна');\n  });\n};\nexport var signOut = function signOut() {\n  return api.get('auth/logout')[\"catch\"](function (error) {\n    return errorHandle(error, 'Неизвестная ошибка');\n  });\n};\nexport var status = function status(cookie) {\n  var _ref, status, data;\n\n  return _regeneratorRuntime.async(function status$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(api.get('auth/status', {\n            headers: {\n              Cookie: \"connect.sid=\".concat(cookie['connect.sid'])\n            }\n          }));\n\n        case 2:\n          _ref = _context.sent;\n          status = _ref.status;\n          data = _ref.data;\n\n          if (!(status !== 200)) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            logged: false,\n            user: null\n          });\n\n        case 7:\n          return _context.abrupt(\"return\", data);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var get = function get(url) {\n  return api.get(url);\n};","map":null,"metadata":{},"sourceType":"module"}
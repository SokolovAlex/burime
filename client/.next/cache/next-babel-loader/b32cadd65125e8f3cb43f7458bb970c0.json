{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useRef } from 'react';\nimport { useSocket } from '../../services/socket';\nimport { ChatContainer, MessagesContainer, ChatHeader, ChatToolBar, ChatInputWrapper, CloseIcon, ChatAction, ChatInner, ChatMessage, MessageContent, MessageAuthor, MessageInfo, MessageDate, ChatInput, ContentWrapper, ChatHeaderInner } from './styled';\nimport { isClient } from '../../config';\nimport { useUser } from '../../services/contexts/auth';\nimport { CSSTransition } from 'react-transition-group';\nimport { Send } from '@styled-icons/boxicons-regular/Send';\nimport { sendCommonMessage } from '../../constants/socketEvents';\nimport { UsersBadge } from './UsersBadge/UsersBadge';\nimport { useMessages } from '../../services/api/messages';\nimport { format } from '../../services/date';\nexport var Chat = function Chat() {\n  var user = useUser();\n\n  if (!isClient || !user) {\n    return null;\n  }\n\n  var socket = useSocket();\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState(''),\n      newMessage = _useState2[0],\n      setNewMessage = _useState2[1];\n\n  var _useMessages = useMessages(user.email, socket),\n      messages = _useMessages.messages,\n      activeUsers = _useMessages.activeUsers;\n\n  var endEl = useRef(null);\n  var openChat = useCallback(function () {\n    if (open) return;\n    if (!endEl || !endEl.current) return;\n    setTimeout(function () {\n      return endEl.current && endEl.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }, 500);\n    setOpen(true);\n  }, [open]);\n\n  var printMessage = function printMessage(e) {\n    return setNewMessage(e.currentTarget.value);\n  };\n\n  var sendMessage = useCallback(function () {\n    if (!newMessage) {\n      return;\n    }\n\n    socket.emit(sendCommonMessage, {\n      author: user,\n      content: newMessage\n    });\n    setNewMessage('');\n  }, [socket, newMessage]);\n  return React.createElement(ChatContainer, null, !open && React.createElement(ChatHeader, {\n    onClick: openChat\n  }, React.createElement(ChatHeaderInner, null, React.createElement(UsersBadge, {\n    amount: activeUsers\n  }))), React.createElement(CSSTransition, {\n    \"in\": open,\n    timeout: 500\n  }, React.createElement(ChatInner, null, React.createElement(ContentWrapper, null, React.createElement(CloseIcon, {\n    onClick: function onClick() {\n      return setOpen(false);\n    }\n  }), React.createElement(MessagesContainer, null, messages.map(function (message) {\n    return React.createElement(ChatMessage, {\n      key: message.id\n    }, React.createElement(MessageInfo, null, React.createElement(MessageAuthor, {\n      isMine: message.isMine\n    }, message.author.name, \":\"), React.createElement(MessageDate, null, format(message.date))), React.createElement(MessageContent, null, message.content));\n  }), React.createElement(\"div\", {\n    ref: endEl\n  }))), React.createElement(ChatToolBar, null, React.createElement(ChatInputWrapper, null, React.createElement(ChatInput, {\n    value: newMessage,\n    placeholder: \"\\u0432\\u0430\\u0448\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n    onChange: function onChange(e) {\n      return printMessage(e);\n    }\n  })), React.createElement(ChatAction, {\n    onClick: sendMessage\n  }, React.createElement(Send, {\n    width: 24\n  }))))));\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexs\\\\Desktop\\\\\\u0410\\u043B\\u0435\\u043A\\u0441\\u0435\\u0439\\\\code\\\\burime\\\\client\\\\components\\\\Chat\\\\Chat.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useRef } from 'react';\nimport { useSocket } from '../../services/socket';\nimport { ChatContainer, MessagesContainer, ChatHeader, ChatToolBar, ChatInputWrapper, CloseIcon, ChatAction, ChatInner, ChatMessage, MessageContent, MessageAuthor, MessageInfo, MessageDate, ChatInput, ContentWrapper, ChatHeaderInner } from './styled';\nimport { isClient } from '../../config';\nimport { useUser } from '../../services/contexts/auth';\nimport { CSSTransition } from 'react-transition-group';\nimport { Send } from '@styled-icons/boxicons-regular/Send';\nimport { sendCommonMessage } from '../../constants/socketEvents';\nimport { UsersBadge } from './UsersBadge/UsersBadge';\nimport { useMessages } from '../../services/api/messages';\nimport { format } from '../../services/date';\nexport var Chat = function Chat() {\n  var user = useUser();\n\n  if (!isClient || !user) {\n    return null;\n  }\n\n  var socket = useSocket();\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState(''),\n      newMessage = _useState2[0],\n      setNewMessage = _useState2[1];\n\n  var _useMessages = useMessages(user.email, socket),\n      messages = _useMessages.messages,\n      activeUsers = _useMessages.activeUsers;\n\n  var endEl = useRef(null);\n  var openChat = useCallback(function () {\n    if (open) return;\n    if (!endEl || !endEl.current) return;\n    setTimeout(function () {\n      return endEl.current && endEl.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }, 500);\n    setOpen(true);\n  }, [open]);\n\n  var printMessage = function printMessage(e) {\n    return setNewMessage(e.currentTarget.value);\n  };\n\n  var sendMessage = useCallback(function () {\n    if (!newMessage) {\n      return;\n    }\n\n    socket.emit(sendCommonMessage, {\n      author: user,\n      content: newMessage\n    });\n    setNewMessage('');\n  }, [socket, newMessage]);\n  return React.createElement(ChatContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, !open && React.createElement(ChatHeader, {\n    onClick: openChat,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(ChatHeaderInner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(UsersBadge, {\n    amount: activeUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }))), React.createElement(CSSTransition, {\n    \"in\": open,\n    timeout: 500,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(ChatInner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(ContentWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(CloseIcon, {\n    onClick: function onClick() {\n      return setOpen(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(MessagesContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, messages.map(function (message) {\n    return React.createElement(ChatMessage, {\n      key: message.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(MessageInfo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(MessageAuthor, {\n      isMine: message.isMine,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, message.author.name, \":\"), React.createElement(MessageDate, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, format(message.date))), React.createElement(MessageContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, message.content));\n  }), React.createElement(\"div\", {\n    ref: endEl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }))), React.createElement(ChatToolBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(ChatInputWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(ChatInput, {\n    value: newMessage,\n    placeholder: \"\\u0432\\u0430\\u0448\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n    onChange: function onChange(e) {\n      return printMessage(e);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })), React.createElement(ChatAction, {\n    onClick: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Send, {\n    width: 24,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }))))));\n};","map":{"version":3,"sources":["C:/Users/alexs/Desktop/Алексей/code/burime/client/components/Chat/Chat.tsx"],"names":["React","useState","useCallback","useRef","useSocket","ChatContainer","MessagesContainer","ChatHeader","ChatToolBar","ChatInputWrapper","CloseIcon","ChatAction","ChatInner","ChatMessage","MessageContent","MessageAuthor","MessageInfo","MessageDate","ChatInput","ContentWrapper","ChatHeaderInner","isClient","useUser","CSSTransition","Send","sendCommonMessage","UsersBadge","useMessages","format","Chat","user","socket","open","setOpen","newMessage","setNewMessage","email","messages","activeUsers","endEl","openChat","current","setTimeout","scrollIntoView","behavior","printMessage","e","currentTarget","value","sendMessage","emit","author","content","map","message","id","isMine","name","date"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, ChangeEvent, useRef } from 'react';\nimport { useSocket } from '../../services/socket';\nimport {\n    ChatContainer,\n    MessagesContainer,\n    ChatHeader,\n    ChatToolBar,\n    ChatInputWrapper,\n    CloseIcon,\n    ChatAction,\n    ChatInner,\n    ChatMessage,\n    MessageContent,\n    MessageAuthor,\n    MessageInfo,\n    MessageDate,\n    ChatInput,\n    ContentWrapper,\n    ChatHeaderInner,\n} from './styled';\nimport { isClient } from '../../config';\nimport { useUser } from '../../services/contexts/auth';\nimport { CSSTransition } from 'react-transition-group';\nimport { Send } from '@styled-icons/boxicons-regular/Send';\nimport { sendCommonMessage } from '../../constants/socketEvents';\nimport { UsersBadge } from './UsersBadge/UsersBadge';\nimport { useMessages } from '../../services/api/messages';\nimport { format } from '../../services/date';\n\nexport const Chat = () => {\n    const user = useUser();\n    if (!isClient || !user) {\n        return null;\n    }\n    const socket = useSocket();\n    const [open, setOpen] = useState(false);\n    const [newMessage, setNewMessage] = useState('');\n    const { messages, activeUsers } = useMessages(user.email, socket);\n    const endEl = useRef<HTMLDivElement>(null);\n\n    const openChat = useCallback(() => {\n        if (open) return;\n        if (!endEl || !endEl.current) return;\n        setTimeout(() => endEl.current && endEl.current.scrollIntoView({ behavior: 'smooth' }), 500);\n        setOpen(true);\n    }, [open]);\n    const printMessage = (e: ChangeEvent<HTMLInputElement>) =>\n        setNewMessage(e.currentTarget.value);\n    const sendMessage = useCallback(() => {\n        if (!newMessage) {\n            return;\n        }\n        socket.emit(sendCommonMessage, { author: user, content: newMessage });\n        setNewMessage('');\n    }, [socket, newMessage]);\n\n    return (\n        <ChatContainer>\n            { !open && <ChatHeader onClick={openChat}>\n                    <ChatHeaderInner>\n                        <UsersBadge amount={activeUsers} />\n                    </ChatHeaderInner>\n                </ChatHeader>\n            }\n            <CSSTransition in={open} timeout={500}>\n                <ChatInner>\n                    <ContentWrapper>\n                        <CloseIcon onClick={() => setOpen(false)}></CloseIcon>\n                        <MessagesContainer>\n                            {messages.map(message => (\n                                <ChatMessage key={message.id}>\n                                    <MessageInfo>\n                                        <MessageAuthor isMine={message.isMine}>\n                                            {message.author.name}:\n                                        </MessageAuthor>\n                                        <MessageDate>\n                                            {format(message.date)}\n                                        </MessageDate>\n                                    </MessageInfo>\n                                    <MessageContent>\n                                        {message.content}\n                                    </MessageContent>\n                                </ChatMessage>\n                            ))}\n                            <div ref={endEl}></div>\n                        </MessagesContainer>\n                    </ContentWrapper>\n                    <ChatToolBar>\n                        <ChatInputWrapper>\n                            <ChatInput\n                                value={newMessage}\n                                placeholder=\"ваше сообщение\"\n                                onChange={e => printMessage(e)}\n                            ></ChatInput>\n                        </ChatInputWrapper>\n                        <ChatAction onClick={sendMessage}>\n                            <Send width={24}></Send>\n                        </ChatAction>\n                    </ChatToolBar>\n                </ChatInner>\n            </CSSTransition>\n        </ChatContainer>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
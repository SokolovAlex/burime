{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport { getApi } from './api';\nvar api = getApi();\n\nvar errorHandle = function errorHandle(error, unknownMessage) {\n  var message = error.response ? error.response.data.message : unknownMessage;\n  return {\n    data: {\n      message: message\n    },\n    status: 555\n  };\n};\n\nexport var registration = function registration(user) {\n  return api.post('auth/registration', user)[\"catch\"](function (error) {\n    return errorHandle(error, 'Регистрация недоступна');\n  });\n};\nexport var signIn = function signIn(user) {\n  return api.post('auth/login', user)[\"catch\"](function (error) {\n    return errorHandle(error, 'Авторизация недоступна');\n  });\n};\nexport var signOut = function signOut() {\n  return api.post('auth/logout')[\"catch\"](function (error) {\n    return errorHandle(error, 'Неизвестная ошибка');\n  });\n};\nexport var status = function status(cookie) {\n  var _ref, status, data;\n\n  return _regeneratorRuntime.async(function status$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(api.get('auth/status', {\n            headers: {\n              Cookie: \"connect.sid=\".concat(cookie['connect.sid'])\n            }\n          }));\n\n        case 2:\n          _ref = _context.sent;\n          status = _ref.status;\n          data = _ref.data;\n\n          if (!(status !== 200)) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            logged: false,\n            user: null\n          });\n\n        case 7:\n          return _context.abrupt(\"return\", data);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var get = function get(url) {\n  return api.get(url);\n};","map":{"version":3,"sources":["C:/Users/alexs/Desktop/Алексей/code/burime/client/services/api/auth.ts"],"names":["getApi","api","errorHandle","error","unknownMessage","message","response","data","status","registration","user","post","signIn","signOut","cookie","get","headers","Cookie","logged","url"],"mappings":";AAAA,SAASA,MAAT,QAAuB,OAAvB;AAQA,IAAMC,GAAG,GAAGD,MAAM,EAAlB;;AAEA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,cAAR,EAA2B;AAC3C,MAAMC,OAAO,GAAGF,KAAK,CAACG,QAAN,GAAiBH,KAAK,CAACG,QAAN,CAAeC,IAAf,CAAoBF,OAArC,GAA+CD,cAA/D;AACA,SAAO;AAAEG,IAAAA,IAAI,EAAE;AAAEF,MAAAA,OAAO,EAAPA;AAAF,KAAR;AAAsBG,IAAAA,MAAM,EAAE;AAA9B,GAAP;AACH,CAHD;;AAKA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD;AAAA,SAAgBT,GAAG,CAACU,IAAJ,CAAS,mBAAT,EAA8BD,IAA9B,WAA0C,UAAAP,KAAK;AAAA,WAAID,WAAW,CAACC,KAAD,EAAQ,wBAAR,CAAf;AAAA,GAA/C,CAAhB;AAAA,CAArB;AACP,OAAO,IAAMS,MAAM,GAAG,SAATA,MAAS,CAACF,IAAD;AAAA,SAAgBT,GAAG,CAACU,IAAJ,CAAS,YAAT,EAAuBD,IAAvB,WAAmC,UAAAP,KAAK;AAAA,WAAID,WAAW,CAACC,KAAD,EAAQ,wBAAR,CAAf;AAAA,GAAxC,CAAhB;AAAA,CAAf;AACP,OAAO,IAAMU,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAMZ,GAAG,CAACU,IAAJ,CAAS,aAAT,WAA8B,UAAAR,KAAK;AAAA,WAAID,WAAW,CAACC,KAAD,EAAQ,oBAAR,CAAf;AAAA,GAAnC,CAAN;AAAA,CAAhB;AACP,OAAO,IAAMK,MAAM,GAAG,gBAAOM,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACab,GAAG,CAACc,GAAJ,CAC3B,aAD2B,EAE3B;AACIC,YAAAA,OAAO,EAAE;AACLC,cAAAA,MAAM,wBAAiBH,MAAM,CAAC,aAAD,CAAvB;AADD;AADb,WAF2B,CADb;;AAAA;AAAA;AACVN,UAAAA,MADU,QACVA,MADU;AACFD,UAAAA,IADE,QACFA,IADE;;AAAA,gBASdC,MAAM,KAAK,GATG;AAAA;AAAA;AAAA;;AAAA,2CAUP;AAAEU,YAAAA,MAAM,EAAE,KAAV;AAAiBR,YAAAA,IAAI,EAAE;AAAvB,WAVO;;AAAA;AAAA,2CAYXH,IAZW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf;AAeP,OAAO,IAAMQ,GAAG,GAAG,SAANA,GAAM,CAAAI,GAAG;AAAA,SAAIlB,GAAG,CAACc,GAAJ,CAAQI,GAAR,CAAJ;AAAA,CAAf","sourcesContent":["import { getApi } from './api';\n\nexport interface User {\n    name?: string;\n    email: string;\n    password: string;\n}\n\nconst api = getApi();\n\nconst errorHandle = (error, unknownMessage) => {\n    const message = error.response ? error.response.data.message : unknownMessage;\n    return { data: { message } , status: 555 };\n};\n\nexport const registration = (user: User) => api.post('auth/registration', user).catch(error => errorHandle(error, 'Регистрация недоступна') );\nexport const signIn = (user: User) => api.post('auth/login', user).catch(error => errorHandle(error, 'Авторизация недоступна') );\nexport const signOut = () => api.post('auth/logout').catch(error => errorHandle(error, 'Неизвестная ошибка') );\nexport const status = async (cookie: any) => {\n    const { status, data } = await api.get<{ logged: boolean; user: any }>(\n        'auth/status',\n        {\n            headers: {\n                Cookie: `connect.sid=${cookie['connect.sid']}`,\n            },\n        }\n    );\n    if (status !== 200) {\n        return { logged: false, user: null };\n    }\n    return data;\n};\n\nexport const get = url => api.get(url);\n"]},"metadata":{},"sourceType":"module"}